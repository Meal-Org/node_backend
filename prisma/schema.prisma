// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  password        String
  firstName       String
  lastName        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  recipes         Recipe[]
  interactions    Interaction[]
  NutritionalInfo NutritionalInfo[]

  @@map("users")
}

model Interaction {
  id         Int      @id @default(autoincrement())
  userQuery  String
  aiResponse String
  createdAt  DateTime @default(now())
  userId     Int? // Optional, if not every interaction is associated with a user
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId], name: "userIdIndex")
}

model Recipe {
  id                Int                @id @default(autoincrement())
  title             String
  description       String?
  servings          Int
  cookingTime       Int
  instructions      String
  published         Boolean            @default(false)
  author            User               @relation(fields: [authorId], references: [id])
  authorId          Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recipeIngredients RecipeIngredient[]

  @@map("recipes")
}

model Ingredient {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  recipeIngredients RecipeIngredient[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  nutritionalInfo   NutritionalInfo?

  @@map("ingredients")
}

model RecipeIngredient {
  recipe          Recipe     @relation(fields: [recipeId], references: [id])
  ingredient      Ingredient @relation(fields: [ingredientId], references: [id])
  recipeId        Int
  ingredientId    Int
  quantity        Float
  measurementUnit String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@id([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model NutritionalInfo {
  id           Int    @id @default(autoincrement())
  ingredientId Int    @unique
  userId       Int?
  calories     Float?
  fatTotal     Float?
  saturatedFat Float?
  cholesterol  Float?
  sodium       Float?
  carbohydrate Float?
  fiber        Float?
  sugars       Float?
  protein      Float?

  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
  user       User?      @relation(fields: [userId], references: [id])

  @@map("nutritional_info")
}
